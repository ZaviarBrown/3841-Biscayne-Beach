generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "darwin-arm64"]
}

datasource db {
    provider  = "sqlite"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Booking {
    id             String   @id @default(cuid())
    userId         String
    name           String
    email          String
    startDate      DateTime
    endDate        DateTime
    priceId        String
    numberOfNights Int
    status         String
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt

    user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    Review Review?
}

model Review {
    id        String   @id @default(cuid())
    text      String
    rating    Int
    userId    String
    bookingId String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
}

model PricingWindows {
    id        String    @id @default(cuid())
    startDate DateTime?
    endDate   DateTime?
    price     Int
    note      String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}

// NextAuth Account
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String   @id @default(cuid())
    name          String?
    email         String?  @unique
    emailVerified Boolean?
    image         String?
    role          String   @default("user")

    accounts Account[]
    sessions Session[]
    Booking  Booking[]
    Review   Review[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
